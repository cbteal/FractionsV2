#BlueJ class context
comment0.params=
comment0.target=Fraction()
comment1.params=num\ denom
comment1.target=Fraction(int,\ int)
comment1.text=\n\ Constructor\ for\ the\ Fraction\ class.\ Will\ construct\ the\ class\ with\ given\n\ numerator\ and\ denominator.\n\n\ Takes\ two\ integers\ (num,denom)\n\ No\ return\n
comment10.params=x\ y
comment10.target=int\ greatestCommonDenominator(int,\ int)
comment10.text=\n\ Method\ for\ calculating\ the\ greatest\ common\ denominator\ of\ two\ numbers.\n\ This\ uses\ the\ Euclidean\ Algorithm\ which\ can\ be\ found\ using\ google.\ I\n\ specifically\ used\ https\://www.math.rutgers.edu/~greenfie/gs2004/euclid.html\n\ \n\ Takes\ two\ integers\ as\ input\n\ Returns\ integer\ (greatest\ common\ denominator)\n
comment11.params=
comment11.target=int\ getGreatestCommonDenominator()
comment11.text=\n\ getGreatestCommonDenominator\ returns\ the\ greatest\ common\ denominator\ of\ a\ Fraction.\n\ \n\ No\ Args\n\ Returns\ greatestCommonDenominator\n
comment12.params=num\ denom
comment12.target=void\ setFraction(int,\ int)
comment12.text=\n\ setFraction\ serves\ the\ purpose\ of\ setting\ the\ numerator\ and\ denominator\ at\ the\ same\ time.\n\ \n\ Two\ integer\ arguments\ (num,denom)\n\ No\ return\n
comment13.params=
comment13.target=void\ switchSigns()
comment13.text=\n\ switchSigns\ is\ designed\ to\ check\ for\ two\ cases.\ One\ is\ that\ the\ denominator\ is\n\ exclusively\ negative,\ and\ one\ that\ is\ when\ both\ numerator\ and\ denominator\ are\ \n\ negative.\ In\ either\ case\ it\ flips\ their\ signs\ so\ that\ the\ negative\ sign\ is\ in\ front\n\ of\ the\ numerator,\ or\ they\ cancel\ out.\n\ \n\ No\ args\n\ No\ Returns\n
comment2.params=that
comment2.target=boolean\ equals(Fraction)
comment2.text=\n\ equals\ method\ will\ compare\ a\ fraction\ to\ another\ fraction,\ determining\ if\n\ they're\ equal.\ It\ compares\ their\ instance\ variables\ (numerator\ &\ \n\ denominator)\n\ \n\ Takes\ Fraction\ object\n\ Returns\ Boolean\ (True\ if\ equal)\n
comment3.params=denom
comment3.target=boolean\ isValidFraction(int)
comment3.text=\n\ isValidFraction\ makes\ sure\ that\ the\ denominator\ is\ non-zero.\n\ \n\ Takes\ integer\ (denominator)\n\ Returns\ boolean\ (true\ if\ non-zero)\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment5.params=num
comment5.target=void\ setNum(int)
comment5.text=\n\ Method\ used\ to\ set\ the\ numerator\ of\ a\ fraction.\n\ \n\ Takes\ int\n\ No\ return\n
comment6.params=denom
comment6.target=void\ setDenom(int)
comment6.text=\n\ Method\ used\ to\ set\ the\ denominator\ of\ a\ fraction.\n\ \n\ Takes\ int\n\ No\ return\n
comment7.params=
comment7.target=int\ getNum()
comment7.text=\n\ Method\ used\ to\ get\ the\ numerator\ of\ a\ fraction.\n\ \n\ No\ Args\n\ Returns\ int\ numerator\n
comment8.params=
comment8.target=int\ getDenom()
comment8.text=\n\ Method\ used\ to\ get\ the\ denominator\ of\ a\ fraction.\n\ \n\ No\ Args\n\ Returns\ int\ denominator\n
comment9.params=
comment9.target=Fraction\ toReducedForm()
comment9.text=\n\ Method\ used\ to\ transform\ the\ fraction\ into\ it's\ reduced\ form.\n\ \n\ No\ args\n\ Returns\ Fraction\ Object\ in\ reduced\ form\n
numComments=14
